#! /bin/bash
#
# Flywheel 2017
#
#


################################################################################
# DEFINE VARIABLES

FLYWHEEL_BASE=/flywheel/v0
MANIFEST_FILE=$FLYWHEEL_BASE/manifest.json
CONFIG_FILE=$FLYWHEEL_BASE/config.json
ANALYSIS_ID=$(jq -r '.destination.id' $CONFIG_FILE)
INPUT_DIR=$FLYWHEEL_BASE/input/nifti
GEAR_OUTPUT_DIR=$FLYWHEEL_BASE/output
MRIQC_OUTPUT_DIR=$GEAR_OUTPUT_DIR/"$ANALYSIS_ID"
WORKING_DIR=$GEAR_OUTPUT_DIR/"$ANALYSIS_ID"_work
BIDS_DIR=$GEAR_OUTPUT_DIR/bids_dataset
CONTAINER='[pennbbl/mriqc_fw_hpc]' # Q: Is this correct? Should I be pointing to container on Flywheel or on CUBIC?


################################################################################
# DISPLAY MRIQC DOCKERFILE FOR BUILD INFO

echo -e "$CONTAINER BEGIN MRIQC DOCKERFILE\n"
#cat ${FLYWHEEL_BASE}/*Dockerfile
echo -e "$CONTAINER END MRIQC DOCKERFILE \n"


################################################################################
# CONFIGURE ENV

source ${FLYWHEEL_BASE}/docker-env.sh


################################################################################
# Parse configuration

function parse_config {

  CONFIG_FILE=$FLYWHEEL_BASE/config.json
  MANIFEST_FILE=$FLYWHEEL_BASE/manifest.json

  if [[ -f $CONFIG_FILE ]]; then
    echo "$(cat $CONFIG_FILE | jq -r '.config.'$1)"
  else
    CONFIG_FILE=$MANIFEST_FILE
    echo "$(cat $MANIFEST_FILE | jq -r '.config.'$1'.default')"
  fi
}

#config_save_outputs="$(parse_config 'save_outputs')"
#config_save_intermediate_work="$(parse_config 'save_intermediate_work')"
#config_intermediate_files="$(parse_config 'intermediate_files')"
#config_intermediate_folders="$(parse_config 'intermediate_folders')"

##################
# Positional Arguments - taken care of above and in the call itself

# Named Arguments - ignored in fMRIPrep run file, so ignore here

# Options for filtering the input BIDS dataset
config_participant_label="$(parse_config 'participant_label')"
#config_session_id="$(parse_config 'session_id')"
#config_run_id="$(parse_config 'run_id')"
config_modalities="$(parse_config 'modalities')" #measurement? Yes. "T1w", "T2w", "bold"
#config_dsname="$(parse_config 'dsname')"

# Instrumental options
#config_work_df="$(parse_config 'work_dir')"
config_verbose_reports="$(parse_config 'verbose_reports')"
#config_write_graph="$(parse_config 'write_graph')" # Do this, but similar to dry-run in that I don't think it needs an argument
#config_dry_run="$(parse_config 'dry_run')"
#config_profile="$(parse_config 'profile')"
#config_use_plugin="$(parse_config 'use_plugin')"
#config_no_sub="$(parse_config 'no_sub')"
#config_email="$(parse_config 'email')"
#config_verbose="$(parse_config 'verbose')" #Maybe?
#config_webapi_url="$(parse_config 'webapi_url')"
#config_webapi_port="$(parse_config 'webapi_port')"
#config_upload_strict="$(parse_config 'upload_strict')"

# Options to handle performance
#config_n_procs="$(parse_config 'n_procs')"
#config_n_cpus="$(parse_config 'n_cpus')"
#config_mem_gb="$(parse_config 'mem_gb')" #Maybe?
#config_testing="$(parse_config 'testing')"
#config_f="$(parse_config 'f')" # DO THIS

# Workflow configuration
#config_ica="$(parse_config 'ica')"
#config_hmc_afni="$(parse_config 'hmc_afni')"
#config_hmc_fsl="$(parse_config 'hmc_fsl')"
#config_fft_spikes_detector="$(parse_config 'fft_spikes_detector')"
#config_df_thres="$(parse_config 'fd_thres')"

# Specific settings for ANTs
#config_ants_nthreads="$(parse_config 'ants_nthreads')" #Default?
#config_ants_float="$(parse_config 'ants_float')" #Default?
#config_ants_settings="$(parse_config 'ants_settings')" #Default?

# Specific settings for AFNI #Maybe want these as options...
#config_deoblique="$(parse_config 'deoblique')"
#config_despike="$(parse_config 'despike')"
#config_start_idx="$(parse_config 'start_idx')"
#config_stop_idx="$(parse_config 'stop_idx')"
#config_slice_timing="$(parse_config 'correct_slice_timing')"




################################################################################


################################################################################
# CREATE A BIDS FORMATTED DIRECTORY
#   Use fw-heudiconv to accomplish this task

/usr/local/miniconda/bin/python ${FLYWHEEL_BASE}/create_archive_fw_heudiconv.py
if [[ $? != 0 ]]; then
  echo "$CONTAINER  Problem creating archive! Exiting (1)"
  rm -rf ${BIDS_DIR}
  exit 1
fi


################################################################################
# VALIDATE INPUT DATA
# Check if the input directory is not empty
if [[ "$(ls -A $INPUT_DIR)" ]] ; then
    echo "$CONTAINER  Starting..."
else
    echo "Input directory is empty: $INPUT_DIR"
    exit 1
fi

# Show the contents of the BIDS directory
ls -R ${BIDS_DIR} # EEK!

################################################################################
# RUN MRIQC
if [[ $config_verbose_reports == "true" ]]; then
    VERBOSE_REPORTS='--verbose-reports'
else
    VERBOSE_REPORTS=''
fi

if [[ $config_modalities != "" ]]; then #Don't know if this will work
    MODALITIES='--modalities ${config_modalities}'
else
    MODALITIES_REPORTS=''
fi

if [[ $config_participant_label != "" ]]; then #Don't know if this will work
    PARTICIPANT_LABEL='--participant_label ${config_participant_label}'
else
    PARTICIPANT_LABEL=''
fi

export NODE_OPTIONS="--max-old-space-size=6000" #What is this?
echo "Call:"
echo mriqc \ # /usr/local/miniconda/bin/mriqc_fw_hpc
      ${BIDS_DIR} \
      ${MRIQC_OUTPUT_DIR} \
      participant \
      --no-sub \
      --skip_bids_validation \
      ${VERBOSE_REPORTS} \
      --write-graph \
      ${MODALITIES} \
      ${PARTICIPANT_LABEL} \
      --n_cpus 1

time mriqc \ 
      ${BIDS_DIR} \
      ${MRIQC_OUTPUT_DIR} \
      participant \
      --no-sub \
      --skip_bids_validation \
      ${VERBOSE_REPORTS} \
      --write-graph \
      ${MODALITIES} \
      ${PARTICIPANT_LABEL} \
      --n_cpus 1




MRIQC_EXITSTATUS=$?


################################################################################
# CLEANUP OUTPUTS
rm -rf "$BIDS_DIR"

if [[ $MRIQC_EXITSTATUS == 0 ]] ; then

  # Convert index to standalone zip archive
  html_file=$(find "$MRIQC_OUTPUT_DIR"/mriqc/ -name "sub-*.html") #Q: Can this deal with multi-session structure?
  SUB_ID=$(basename "$html_file" .html)

  if [[ -n "$html_file" ]]; then
    echo "$CONTAINER  Converting output html report..."
    output_html_file="$GEAR_OUTPUT_DIR"/`basename "$html_file" .html`_"$ANALYSIS_ID".html.zip
    cd $(dirname $html_file)
    cp "$html_file" index.html
    zip -r -q "$output_html_file" \
        index.html \
        "$SUB_ID"/figures \
        "$WORKING_DIR"/reportlets/mriqc/"$SUB_ID" && \
        rm index.html
    echo "$CONTAINER  HTML report converted."
  else
    echo "$CONTAINER  no output html report found!"
  fi

  # Look for files/folders to preserve from the working DIRECTORY
  work_file_zip="$GEAR_OUTPUT_DIR"/mriqc_work_selected_"$SUB_ID"_"$ANALYSIS_ID".zip
  if [[ -n "$config_intermediate_files" ]]; then
    echo "$CONTAINER  Archiving selected intermediate files..."
    cd "$WORKING_DIR"
    for f in "$config_intermediate_files"; do
      zip $work_file_zip `find . -type f -name "$f"`
    done
  fi

  if [[ -n "$config_intermediate_folders" ]]; then
    echo "$CONTAINER  Archiving selected intermediate folders..."
    cd "$WORKING_DIR"
    for f in $config_intermediate_folders; do
      zip $work_file_zip `find . -type d -name "$f"`
    done
  fi

  # Generate zipped output of mriqc
  cd "$GEAR_OUTPUT_DIR"
  echo "$CONTAINER  generating zip archive from outputs..."

  time zip -q -r "$GEAR_OUTPUT_DIR"/mriqc_"$SUB_ID"_"$ANALYSIS_ID" $(basename "$MRIQC_OUTPUT_DIR")

  if [[ $config_save_intermediate_work == 'true' ]] ; then
    echo "$CONTAINER  generating zip archive from intermediate work files..."
    cd "$GEAR_OUTPUT_DIR"
    time zip -q -r "$GEAR_OUTPUT_DIR"/mriqc_work_"$SUB_ID"_"$ANALYSIS_ID" $(basename "$WORKING_DIR")
  fi
  chmod -R 777 $GEAR_OUTPUT_DIR

  ################################################################################
  # COPY ANALYSIS TO PROJECT LEVEL IF MULTI-SESSION
  #   Use Python SDK to accomplish this task

  /usr/local/miniconda/bin/python ${FLYWHEEL_BASE}/move_to_project.py # This instead? /Users/butellyn/miniconda3/bin/python
  if [[ $? != 0 ]]; then
    echo "$CONTAINER  Problem resolving multi-session structure! Exiting (1)"
    exit 1
  fi

elif [[ $config_save_outputs == 'true' ]] ; then
  echo "$CONTAINER  Error occurred. Config 'save_outputs' set to true. Zipping up outputs."
  cd "$GEAR_OUTPUT_DIR"
  time zip -q -r "$GEAR_OUTPUT_DIR"/debug_mriqc_"$ANALYSIS_ID"  $(basename "$MRIQC_OUTPUT_DIR")
  time zip -q -r "$GEAR_OUTPUT_DIR"/debug_mriqc_work_"$ANALYSIS_ID" $(basename "$WORKING_DIR")
  chmod -R 777 $GEAR_OUTPUT_DIR

  ################################################################################
  # COPY ANALYSIS TO PROJECT LEVEL IF MULTI-SESSION
  #   Use Python SDK to accomplish this task

  /usr/local/miniconda/bin/python ${FLYWHEEL_BASE}/move_to_project.py # This instead? /Users/butellyn/miniconda3/bin/python
  if [[ $? != 0 ]]; then
    echo "$CONTAINER  Problem resolving multi-session structure! Exiting (1)"
    exit 1
  fi

else
  echo "$CONTAINER  Errors encountered during execution. Save outputs config not set. Cleaning up and exiting."
fi

# Clean up
rm -rf "$WORKING_DIR"
rm -rf "$MRIQC_OUTPUT_DIR"


echo -e "Wrote: `ls -lh $GEAR_OUTPUT_DIR`"

exit $MRIQC_EXITSTATUS
